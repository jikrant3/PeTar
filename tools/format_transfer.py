#!/usr/bin/env python3

import numpy as np
import sys
import os
import petar
import getopt

if __name__ == '__main__':

    data_type = 'single,binary'
    replace_flag = False
    snapshot_format = 'ascii'
    output_format = 'npy'

    def usage():
        print("The tool to transfer the format of post-processed snapshots generated from petar.data.process")
        print("Another tool 'petar.format.transfer' is used for snapshots generated from petar")
        print("Support data format:")
        print("    ascii: text format generated by numpy.savetxt, all data type are floating")
        print("    binary: binary format generated by numpy.tofile, data types of columns are kept")
        print("            notice that this is a file format to save data, not be confused with a physical binary of stars")
        print("    npy: binary format generated by numpy.save, data types of columns are recored in header")
        print("         npy format can be directly read by numpy.load without using petar tool")
        print("Please ensure that the stellar evolution method (-i), external mode (-t) and binary information (-B) used in petar.data.process are the same here.")
        print("")
        print("Usage: petar.format.transfer.post [option] data_filename")
        print("data_filename: A list of snapshot data path, each line for one snapshot")
        print("               The filename is origin type from petar snapshot, e.g., data.0. No suffix like '.single' is needed")
        print("")
        print("option:")
        print("  -h(--help): help")
        print("  -i(--interrupt-mode): the interruption mode used in petar, choices: no, base, bse, mobse (no)")
        print("  -t(--external-mode): external mode used in petar, choices: galpy, no (no)")
        print("  -B(--full-binary): if petar.data.process use -B option to obtain full (physical) binary orbital parameters, this option is needed to correctly read (physical) binary snapshots")
        print("  -s(--snapshot-format): input snapshot format: ascii, binary or npy (ascii)")
        print("  -o(--output-format): output snapshot format: ascii, binary or npy (npy)")
        print("  -d(--data-type): data type of snapshots, multiple types can be combined. (single,binary)")
        print("       Support type list:")
        print("           single: single snapshots from petar.data.process")
        print("           binary: (physical) binary snapshots from petar.data.process")
        print("           triple: triple snapshots from petar.data.process")
        print("           quadruple: quadruple snapshots from petar.dat.process")
        print("       For multiple types, combine the names by ',' such as 'single,binary'")
        print("  -r(--replace): if used and -o is ascii or binary, input snapshots are replaced by transferred ones; for -o npy, new snapshots with a suffix of filename '.npy' are generated.")
        print("                 if not used, new snapshots are generated with an additional suffix of filename '.a' (ascii),'.b' (binary) or '.npy'")
    
    try:
        shortargs = 'i:t:s:o:d:rBh'
        longargs = ['external-mode=','interrupt-mode=','snapshot-format=','output-format=','data-type=','replace','full-binary','help']
        opts,remainder= getopt.getopt( sys.argv[1:], shortargs, longargs)

        snapshot_kwargs=dict()
        for opt,arg in opts:
            if opt in ('-h','--help'):
                usage()
                sys.exit(1)
            elif opt in ('-i','--interrupt-mode'):
                snapshot_kwargs['interrupt_mode'] = arg
            elif opt in ('-t','--external-mode'):
                snapshot_kwargs['external_mode'] = arg
            elif opt in ('-s','--snapshot-format'):
                snapshot_format = arg
            elif opt in ('-o','--output-format'):
                output_format = arg
            elif opt in ('-d','--data-type'):
                data_type = arg
            elif opt in ('-r', '--replace'):
                replace_flag = True
            elif opt in ('-B','--full-binary'):
                snapshot_kwargs['simple_mode'] = False
            else:
                assert False, "unhandeld option"

    except getopt.GetoptError:
        print('getopt error!')
        usage()
        sys.exit(1)

    filename = remainder[0]
    fl = open(filename,'r')
    file_list = fl.read()
    path_list = file_list.splitlines()

    data_type_list = data_type.split(',')
    for file_path in path_list:
        print('convert %s' % file_path)
        for dtype in data_type_list:
            data = None
            if (dtype == 'single'):
                data = petar.Particle(**snapshot_kwargs)
            elif (dtype == 'binary'):
                data = petar.Binary(member_particle_type=petar.Particle, **snapshot_kwargs)
            elif (dtype == 'triple'):
                data = petar.Binary(member_particle_type_one=petar.Particle, member_particle_type_two=[petar.Particle, petar.Particle], **snapshot_kwargs)
            elif (dtype == 'quadruple'):
                data = petar.Binary(member_particle_type=[petar.Particle, petar.Particle], **snapshot_kwargs)

            file_path_full = '%s.%s' % (file_path, dtype)
            if (snapshot_format == 'ascii'):
                data.loadtxt(file_path_full)
            elif (snapshot_format == 'binary'):
                data.fromfile(file_path_full)
            elif (snapshot_format == 'npy'):
                data.load(file_path_full+'.npy')
            else:
                raise ValueError('Error: snapshot format %s is not supported' % snapshot_format)
            out_path = file_path_full
            if (output_format == 'ascii'):
                if (not replace_flag): 
                    out_path = file_path_full+'.a'
                data.savetxt(out_path)
            elif (output_format == 'binary'):
                if (not replace_flag): 
                    out_path = file_path_full+'.b'
                data.tofile(out_path)
            elif (output_format == 'npy'):
                if (not replace_flag): 
                    out_path = file_path_full+'.npy'
                data.save(out_path)
            else:
                raise ValueError('Error: output format %s is not supported' % snapshot_format)


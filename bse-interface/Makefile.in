se_mode=@with_interrupt@

BSE_LIB=libbse.a

ifeq ($(se_mode),bse)
BSE_TEST=petar.bse
BSE_PATH=bse
CXXFLAGS = -D BSEBBF -D BSE_BASE
else ifeq ($(se_mode),mobse)
BSE_TEST=petar.mobse
BSE_PATH=mobse
CXXFLAGS = -D MOBSE -D BSE_BASE
else ifeq ($(se_mode),bseEmp)
BSE_TEST=petar.bseEmp
BSE_PATH=bseEmp
CXXFLAGS = -D BSEEMP -D BSE_BASE
endif


TARGET: $(BSE_LIB) $(BSE_TEST) petar.get.init.binary

FC=@FC@
CXX=@CXX@
use_mpi =@use_mpi@
use_omp = @use_omp@

#FFLAGS = -O2 -Wall -finit-real=nan 
CXXFLAGS += @CXXFLAGS@ @OPTFLAGS@ 
FFLAGS += @FCFLAGS@
FCLIBS = @FCLIBS@

#ifeq ($(use_mpi),yes) 
#CXXFLAGS += -DPARTICLE_SIMULATOR_MPI_PARALLEL
#endif # mpi

ifeq ($(use_omp),yes)
CXXFLAGS += @OPENMP_CXXFLAGS@
FFLAGS += @OPENMP_CXXFLAGS@
CXXFLAGS += -D PARTICLE_SIMULATOR_THREAD_PARALLEL
endif # omp

#FFLIBS += @FLIBS@
#FFLAGS= -g -O0 -Wall -finit-real=nan -fbounds-check
#CXXFLAGS= -g -O2 -Wall -std=c++11 -fbounds-check

VPATH=$(BSE_PATH) 

SRC:= $(shell find $(BSE_PATH) -type f  \( -iname '*.f' ! -iname '.*' ! -iname '[sb]se.f' ! -iname 'mo[sb]se.f' ! -iname 'popbin.f' \) )
OBJ:= $(SRC:.f=.o)
ifeq ($(se_mode),bseEmp)
SRC:= $(shell find $(BSE_PATH)  \( -iname '*.f' ! -iname '.*' ! -iname '[sb]se.f' ! -iname 'mo[sb]se.f' ! -iname 'popbin.f' \) )
OBJ:= $(SRC:.f=.o)
SRCCXX:= $(shell find $(BSE_PATH) -maxdepth 1 \( -iname '*.cpp' \) )
OBJCXX:= $(SRCCXX:.cpp=.o)
endif


$(BSE_LIB): $(OBJ) $(OBJCXX)
	ar rcs $@ $^

$(BSE_TEST): bse_test.cxx $(BSE_LIB) bse_interface.h
	$(CXX) $(CXXFLAGS) $< -o $@ -L./ -L../parallel-random -lbse -lrand $(FCLIBS)

petar.get.init.binary: get_init_binary_bse.sh
	ln -sf $< $@

install:
	install -d @prefix@/bin/
	install -m 755 $(BSE_TEST) petar.get.init.binary @prefix@/bin/

clean:
	rm -f $(BSE_PATH)/*.o *.o $(BSE_TEST) $(BSE_LIB)
